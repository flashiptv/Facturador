// Script maestro para ejecutar todas las pruebas de la aplicaci√≥n
const AppTester = require('./test-app-functionality');
const PageTester = require('./test-pages-structure');
const InvoiceTester = require('./test-invoice-functionality');
const PDFTester = require('./test-pdf-export');
const FileTester = require('./test-file-management');
const ConfigTester = require('./test-app-configuration');
const TemplateTester = require('./test-template-functionality');
const IntegrationTester = require('./test-integration-complete');
const ErrorTester = require('./test-error-handling');

class MasterTester {
    constructor() {
        this.results = {
            totalTests: 0,
            totalPassed: 0,
            totalFailed: 0,
            suites: []
        };
    }

    async runAllTests() {
        console.log('üöÄ INICIANDO VERIFICACI√ìN COMPLETA DE LA APLICACI√ìN FACTURADOR');
        console.log('=' .repeat(80));
        console.log('üìÖ Fecha:', new Date().toLocaleDateString('es-ES'));
        console.log('üïê Hora:', new Date().toLocaleTimeString('es-ES'));
        console.log('=' .repeat(80));
        console.log();

        const startTime = Date.now();

        try {
            // Ejecutar todas las suites de pruebas
            await this.runTestSuite('Funcionalidad B√°sica', AppTester);
            await this.runTestSuite('Estructura de P√°ginas', PageTester);
            await this.runTestSuite('Gesti√≥n de Facturas', InvoiceTester);
            await this.runTestSuite('Exportaci√≥n PDF', PDFTester);
            await this.runTestSuite('Gesti√≥n de Archivos', FileTester);
            await this.runTestSuite('Configuraci√≥n', ConfigTester);
            await this.runTestSuite('Plantillas', TemplateTester);
            await this.runTestSuite('Integraci√≥n Completa', IntegrationTester);
            await this.runTestSuite('Manejo de Errores', ErrorTester);

            const endTime = Date.now();
            const duration = ((endTime - startTime) / 1000).toFixed(2);

            this.showFinalResults(duration);

        } catch (error) {
            console.error('‚ùå Error durante la ejecuci√≥n de pruebas:', error);
        }
    }

    async runTestSuite(suiteName, TesterClass) {
        console.log(`\nüß™ EJECUTANDO: ${suiteName.toUpperCase()}`);
        console.log('-'.repeat(60));

        try {
            const tester = new TesterClass();
            
            // Ejecutar el m√©todo de pruebas apropiado
            if (tester.runAllTests) {
                await tester.runAllTests();
            } else if (tester.runPageTests) {
                await tester.runPageTests();
            } else if (tester.runInvoiceTests) {
                await tester.runInvoiceTests();
            } else if (tester.runPDFTests) {
                await tester.runPDFTests();
            } else if (tester.runFileTests) {
                await tester.runFileTests();
            } else if (tester.runConfigurationTests) {
                await tester.runConfigurationTests();
            } else if (tester.runTemplateTests) {
                await tester.runTemplateTests();
            } else if (tester.runIntegrationTests) {
                await tester.runIntegrationTests();
            } else if (tester.runErrorHandlingTests) {
                await tester.runErrorHandlingTests();
            }

            // Recopilar resultados
            if (tester.testResults) {
                const suiteResult = {
                    name: suiteName,
                    passed: tester.testResults.passed,
                    failed: tester.testResults.failed,
                    total: tester.testResults.tests.length,
                    successRate: ((tester.testResults.passed / tester.testResults.tests.length) * 100).toFixed(1)
                };

                this.results.suites.push(suiteResult);
                this.results.totalTests += suiteResult.total;
                this.results.totalPassed += suiteResult.passed;
                this.results.totalFailed += suiteResult.failed;

                console.log(`‚úÖ ${suiteName}: ${suiteResult.passed}/${suiteResult.total} pruebas exitosas (${suiteResult.successRate}%)`);
            }

        } catch (error) {
            console.error(`‚ùå Error en suite ${suiteName}:`, error.message);
            this.results.suites.push({
                name: suiteName,
                passed: 0,
                failed: 1,
                total: 1,
                successRate: '0.0',
                error: error.message
            });
            this.results.totalTests += 1;
            this.results.totalFailed += 1;
        }
    }

    showFinalResults(duration) {
        console.log('\n' + '='.repeat(80));
        console.log('üìä RESUMEN FINAL DE VERIFICACI√ìN');
        console.log('='.repeat(80));

        // Estad√≠sticas generales
        const overallSuccessRate = ((this.results.totalPassed / this.results.totalTests) * 100).toFixed(1);
        
        console.log(`üìà ESTAD√çSTICAS GENERALES:`);
        console.log(`   ‚Ä¢ Total de pruebas ejecutadas: ${this.results.totalTests}`);
        console.log(`   ‚Ä¢ Pruebas exitosas: ${this.results.totalPassed}`);
        console.log(`   ‚Ä¢ Pruebas fallidas: ${this.results.totalFailed}`);
        console.log(`   ‚Ä¢ Tasa de √©xito global: ${overallSuccessRate}%`);
        console.log(`   ‚Ä¢ Tiempo total de ejecuci√≥n: ${duration} segundos`);

        console.log('\nüìã RESULTADOS POR COMPONENTE:');
        this.results.suites.forEach(suite => {
            const status = parseFloat(suite.successRate) >= 90 ? '‚úÖ' : 
                          parseFloat(suite.successRate) >= 70 ? '‚ö†Ô∏è' : '‚ùå';
            console.log(`   ${status} ${suite.name}: ${suite.passed}/${suite.total} (${suite.successRate}%)`);
        });

        // Evaluaci√≥n final
        console.log('\nüéØ EVALUACI√ìN FINAL:');
        if (overallSuccessRate >= 95) {
            console.log('üéâ ¬°EXCELENTE! La aplicaci√≥n est√° funcionando perfectamente.');
            console.log('üöÄ ESTADO: APROBADO PARA PRODUCCI√ìN');
            console.log('‚ú® Todos los componentes principales est√°n operativos.');
        } else if (overallSuccessRate >= 85) {
            console.log('‚úÖ ¬°MUY BIEN! La aplicaci√≥n est√° funcionando correctamente.');
            console.log('üîß ESTADO: FUNCIONAL CON MEJORAS MENORES');
            console.log('üí° Algunos aspectos pueden necesitar atenci√≥n.');
        } else if (overallSuccessRate >= 70) {
            console.log('‚ö†Ô∏è La aplicaci√≥n funciona pero necesita mejoras.');
            console.log('üõ†Ô∏è ESTADO: REQUIERE CORRECCIONES');
        } else {
            console.log('‚ùå La aplicaci√≥n tiene problemas significativos.');
            console.log('üö® ESTADO: REQUIERE REVISI√ìN COMPLETA');
        }

        // Componentes cr√≠ticos
        console.log('\nüîç COMPONENTES CR√çTICOS:');
        const criticalComponents = this.results.suites.filter(suite => 
            suite.name.includes('Funcionalidad') || 
            suite.name.includes('Integraci√≥n') || 
            suite.name.includes('Facturas')
        );

        criticalComponents.forEach(component => {
            const status = parseFloat(component.successRate) >= 90 ? '‚úÖ OPERATIVO' : '‚ö†Ô∏è REQUIERE ATENCI√ìN';
            console.log(`   ‚Ä¢ ${component.name}: ${status}`);
        });

        // Recomendaciones
        console.log('\nüí° PR√ìXIMOS PASOS:');
        const failedSuites = this.results.suites.filter(suite => parseFloat(suite.successRate) < 90);
        
        if (failedSuites.length === 0) {
            console.log('   ‚úÖ No se requieren acciones adicionales');
            console.log('   üéØ La aplicaci√≥n est√° lista para uso en producci√≥n');
        } else {
            console.log('   üîß Revisar los siguientes componentes:');
            failedSuites.forEach(suite => {
                console.log(`      ‚Ä¢ ${suite.name} (${suite.successRate}% √©xito)`);
            });
        }

        console.log('\nüìÑ DOCUMENTACI√ìN:');
        console.log('   ‚Ä¢ Reporte detallado: REPORTE_FINAL_VERIFICACION.md');
        console.log('   ‚Ä¢ Scripts de prueba disponibles en el directorio ra√≠z');
        console.log('   ‚Ä¢ Logs de ejecuci√≥n guardados autom√°ticamente');

        console.log('\n' + '='.repeat(80));
        console.log('üèÅ VERIFICACI√ìN COMPLETA FINALIZADA');
        console.log('='.repeat(80));
    }
}

// Ejecutar todas las pruebas si se ejecuta directamente
if (require.main === module) {
    const masterTester = new MasterTester();
    masterTester.runAllTests().then(() => {
        process.exit(0);
    }).catch(error => {
        console.error('Error en la ejecuci√≥n de pruebas maestras:', error);
        process.exit(1);
    });
}

module.exports = MasterTester;
